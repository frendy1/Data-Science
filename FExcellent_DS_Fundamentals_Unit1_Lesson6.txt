
#######Frendy Excellent##################################
#Data Science Fundamentals###############################
#Unit 1 Lesson6##########################################

########Drills###########################################

#Vectors
# I believe that my approach (simple steps) is clearer than the solution
class Vector(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def add(self, other_vector):
        sum_vector = Vector(0,0)
        sum_vector.x = other_vector.x + self.x
        sum_vector.y = other_vector.y + self.y
        return sum_vector


#Quarks 
#Solution is already present in lesson 2. Thus, I used it on codewars :)

class Quark(object):

    # This method is automatically called whenever we create a new quark.
    # It sets the color and flavor attributes when we create an instance.
    def __init__(self, color, flavor):
        self.color = color
        self.flavor = flavor

    # Every quark has the same baryon number, so we set this outside the
    # init function.
    baryon_number = 1 / 3

    # This method models the way quarks interact with one another by
    # exchanging color.
    def interact(self, other_quark):
        self.color, other_quark.color = other_quark.color, self.color

    # The repr method controls how the object is represented by the
    # print() function and other representations of the object.
    def __repr__(self):
        return "{} {} quark".format(self.color, self.flavor)



#Puzzlebox==========================================================
#Confusing instructions, but fun
#Not doing it to accrue unearned points, but I would like to say...
#Printed and read all sorts of info and hints on puzzlebox class. Then, I decided that "lock" method was the way to proceed.
#whenever I used the "lock" method, I was on the right track, when it printed, "Did you know the key changes each time you print it?\n" 
#I then decided to figure a way to pass the class's key to "lock" method. 2:00 a.m., gave up. Looked at solution.

#Recommendation: The course should perhaps have taught us how to use "inspect.getsource" method.
#Using "inspect.getsource" yields the following info.

#    def lock(self, *args):
#        if len(args) != 1:
#            return "This method expects one argument.\n"
#        elif type(args[0]) != int:
#            return "This method expects an integer.\n"
#        elif args[0] != self.key:
#            return "Did you know the key changes each time you print it?\n"
#        else:
#            return "You put the key in the lock! The answer is, of course, 42. Return that number from your answer() function to pass this kata.\n"

#So, the following code would have made it easier, had the course informed us about "inspect.getsource"

#def answer(puzzlebox):
#    # Print statements are your friend.
    
#    import inspect
    
#    a = puzzlebox
    
#    for attribute in dir(a):
#      if hasattr( a,  attribute ):
#        c = str(getattr(a, attribute))
#        if "bound" in c and "__" not in c:
#          print(inspect.getsource(getattr(a, attribute)))

return 42
